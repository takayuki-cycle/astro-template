---
import { ClientRouter } from 'astro:transitions'
import { BASE_URL } from '@/constants/url'
import HeadGTM from '@/layouts/head/HeadGTM.html'
import type { HeadPageProps, HeadSiteProps } from '@/layouts/head/types'

const {
  title,
  description,
  robots,
  ogType,
  ogImage,
  ogImageAlt,
  xCreator,
  author,
  googleSiteVerification
}: HeadPageProps = Astro.props.headPage

const {
  webSiteName,
  isFaviconSVG,
  xCard,
  xSite,
  isAppleTouchIcon,
  themeColor,
  fbAppID,
  gtmID
}: HeadSiteProps = Astro.props.headSite

const isDisplayMetaRobotsTag = robots && robots !== 'all'
const canonical = new URL(Astro.url.href)
const origin = Astro.url.origin
---

<head>
  {/* 必須 */}
  <meta charset='UTF-8' />
  <title>{title}{webSiteName && ' - '}{webSiteName}</title>
  <meta name='description' content={description} />
  <meta name='viewport' content='width=device-width, initial-scale=1' />
  {isDisplayMetaRobotsTag && <meta name='robots' content={robots} />}
  <meta name='format-detection' content='telephone=no' />
  {
    isFaviconSVG && (
      <link rel='icon' href={`${BASE_URL}favicon.svg`} sizes='any' type='image/svg+xml' />
    )
  }
  <link rel='icon' href={`${BASE_URL}favicon.png`} sizes='48x48' />
  <link rel='canonical' href={canonical} />
  <link rel='sitemap' href={new URL('sitemap-index.xml', `${origin}${BASE_URL}`)} />
  {/* Fonts */}
  <link rel='preconnect' href='https://fonts.googleapis.com' />
  <link rel='preconnect' href='https://fonts.gstatic.com' crossorigin />
  <link
    href='https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@100..900&display=swap'
    rel='stylesheet'
  />
  <link
    href='https://fonts.googleapis.com/css2?family=Noto+Sans+Mono:wght@100..900&family=Space+Mono:ital,wght@0,400;0,700;1,400;1,700&display=swap'
    rel='stylesheet'
  />

  <ClientRouter />

  {/* OGP */}
  <meta property='og:title' content={`${title}${webSiteName ? ' - ' + webSiteName : ''}`} />
  <meta property='og:description' content={description} />
  <meta property='og:type' content={ogType} />
  <meta property='og:url' content={canonical} />
  <meta property='og:image' content={new URL(ogImage, `${origin}${BASE_URL}`)} />
  <meta property='og:image:width' content='1200' />
  <meta property='og:image:height' content='630' />
  <meta property='og:image:alt' content={ogImageAlt} />
  <meta property='og:site_name' content={webSiteName} />
  <meta property='og:locale' content='ja_JP' />

  {/* X Card */}
  <meta name='twitter:card' content={xCard} />
  <meta name='twitter:title' content={`${title}${webSiteName ? ' - ' + webSiteName : ''}`} />
  <meta name='twitter:description' content={description} />
  <meta name='twitter:image:alt' content={ogImageAlt} />
  <meta name='twitter:url' content={canonical} />
  {xSite && <meta name='twitter:site' content={xSite} />}
  {xCreator && <meta name='twitter:creator' content={xCreator} />}

  {/* 任意 */}
  {author && <meta name='author' content={author} />}
  {
    isAppleTouchIcon && (
      <link rel='apple-touch-icon' sizes='180x180' href={`${BASE_URL}apple-touch-icon.png`} />
    )
  }
  {themeColor && <meta name='theme-color' content={themeColor} />}
  {webSiteName && <meta name='application-name' content={webSiteName} />}
  {
    googleSiteVerification && (
      <meta name='google-site-verification' content={googleSiteVerification} />
    )
  }
  {fbAppID && <meta property='fb:app_id' content={fbAppID} />}
  <meta name='generator' content={Astro.generator} />

  {/* Google Tag Manager */}
  {/* 直書きだとコードを整形してくれなかったので、コンポーネント化 */}
  {/* gtmIDを変更するときは、HeadGTMの方も変更すること */}
  {/* 開発者ツールでHTMLを見ると、headタグの直上になぜかGTMの一部のコードが表示 */}
  {gtmID && <HeadGTM />}

  <script>
    // 開始: 350pxの画面幅未満ではviewportを固定してレイアウト崩れを防止
    const initializeViewport = () => {
      const debouncedResize = debounce(handleResize)
      window.addEventListener('resize', debouncedResize, false)
      debouncedResize()
    }

    const handleResize = () => {
      const minWidth = 350
      const value =
        window.outerWidth > minWidth ? 'width=device-width, initial-scale=1' : `width=${minWidth}`
      const viewport = document.querySelector('meta[name="viewport"]')
      if (viewport && viewport.getAttribute('content') !== value) {
        viewport.setAttribute('content', value)
      }
    }

    const debounce = <T extends any[], R>(callback: (...args: T) => R): ((...args: T) => void) => {
      let timeout: number | undefined

      return (...args: T): void => {
        if (timeout !== undefined) cancelAnimationFrame(timeout)
        timeout = requestAnimationFrame(() => callback.apply(this, args))
      }
    }
    // 終了

    // 開始: 固定ヘッダーの高さを取得して、ページ内リンクで遷移するときにその高さを加えてスクロールすることでコンテンツと重なる問題を解消
    const observeHeaderBlockSize = new ResizeObserver((entries) => {
      const header = entries[0]
      const blockSize = header?.borderBoxSize[0]?.blockSize // 少数を含むヘッダーの高さを取得[px]
      const roundedBlockSize = blockSize !== undefined ? Math.round(blockSize) : 0
      if (roundedBlockSize !== 0)
        document.documentElement.style.setProperty('--header-block-size', `${roundedBlockSize}px`)
    })
    // 終了

    // 注意: <ClientRouter />を使用するときは、'DOMContentLoaded'の代わりに'astro:page-load'を使用してください。
    document.addEventListener('astro:page-load', () => {
      const header = document.querySelector('header')
      initializeViewport()
      if (header) {
        observeHeaderBlockSize.observe(header)
        const headerInitHeight = Math.round(header.getBoundingClientRect().height)
        document.documentElement.style.setProperty('--header-block-size', `${headerInitHeight}px`) // ページ遷移直後のヘッダーの高さを取得
      }
    })
  </script>
</head>
