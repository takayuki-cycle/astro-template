---
import { Radio } from '@/components/radio/Radio'
import type { Props } from '@/components/radioOrTabGroup/types'
import { style } from '@/components/radioOrTabGroup/styles'

const { sx, label = undefined, group, apiKey = undefined } = Astro.props
// 本来は2だけではなくcontentsNumberの取りうる範囲をすべて列挙するべきなのですが、列挙を省略するために2だけにしています。
const sxResult = sx?.type === 'tab' ? { ...sx, contentsNumber: group.length as 2 } : sx
const labelResult = label === undefined ? 'タブ' : label
const name = (apiKey === undefined ? labelResult : apiKey) || ''
const sxRadio = { color: sx?.color }
---

<fieldset class={style(sxResult)}>
  <legend>{labelResult}</legend>
  {
    group.map((g, index) => (
      <>
        {/* eslint-disable no-restricted-syntax */}
        {sx?.type === 'tab' ? (
          <>
            <label for={`${name}-${index}`}>
              <Radio sx={sxRadio} id={index} name={name} />
              {g}
            </label>
          </>
        ) : (
          <label for={`${name}-${index}`}>
            <Radio client:load sx={sxRadio} id={index} name={name} />
            {g}
          </label>
        )}
        {/* eslint-enable no-restricted-syntax */}
      </>
    ))
  }
  {
    sx?.type === 'tab' && (
      <slot>
        <p>This is my fallback content, if there is no child passed into slot</p>
      </slot>
    )
  }
</fieldset>
