---
import { Radio } from '@/components'
import type { Props } from '@/components/radioGroupOrTabs/types'
import { style } from '@/components/radioGroupOrTabs/styles'

const { sx, label = undefined, group, apiKey = undefined, skeletonItem = 2 } = Astro.props
const name = (apiKey === undefined ? label : apiKey) || ''
const sxRadio = { color: sx?.color, preview: sx?.preview }
---

<fieldset class={`radio-group-or-tabs-class ${style(sx)}`}>
  <legend>{label}</legend>
  {
    sx?.type === 'tab' ? (
      <>
        <div class='tab-container'>
          {group.map((g, index) => (
            <label for={`${name}-${index}`}>
              {/* eslint-disable-next-line no-restricted-syntax */}
              <Radio sx={sxRadio} id={index} name={name} />
              {g}
            </label>
          ))}
        </div>
        <slot>
          <p>This is my fallback content, if there is no child passed into slot</p>
        </slot>
      </>
    ) : sx?.preview === 'skeleton' ? (
      <>
        {Array.from({ length: skeletonItem }, (_, id) => (
          <div
            class='radio-group-skeleton-container'
            role='status'
            aria-busy='true'
            aria-label='読み込み中です。'
          >
            {/* eslint-disable-next-line no-restricted-syntax */}
            <Radio sx={sxRadio} id={id} name='preview-skeleton' />
            <div class='radio-group-skeleton-item' />
          </div>
        ))}
      </>
    ) : (
      // sx?.type === 'radio'のとき
      group.map((g, index) => (
        <label for={`${name}-${index}`}>
          {/* eslint-disable-next-line no-restricted-syntax */}
          <Radio client:load sx={sxRadio} id={index} name={name} />
          {g}
        </label>
      ))
    )
  }
</fieldset>

<script>
  // タブの切り替え(sx?.type === 'radio'のときは不使用)
  if (document.querySelector('.tab-container')) {
    document.querySelectorAll('.radio-group-or-tabs-class').forEach((container) => {
      const labels = container.querySelectorAll('fieldset > .tab-container > label')
      const contents = container.querySelectorAll<HTMLElement>(
        'fieldset > *:not(legend):not(.tab-container):not(label)'
      )
      labels.forEach((label, index) => {
        const input = label.querySelector('input')
        if (input) {
          input.addEventListener('change', () => {
            contents.forEach((content, i) => {
              content.classList.toggle('global-hidden-important', i !== index)
              content.classList.toggle('global-flex-important', i === index)
            })
          })
        }
      })
    })
  }
</script>
