---
import Image from '@/components/media/image/Image.astro'
import anonymousGeneral from '@/assets/images/content/authors/anonymous/general.webp'
import {
  SIZE_MAP,
  extractInitialCharacters,
  validateAvatarProps
} from '@/components/avatar/utils.ts'
import { styleLetter, styleImage } from '@/components/avatar/styles.ts'
import type { Props, Size } from '@/components/avatar/types.ts'
import List from '@/components/list/List.astro'

const { sx, src = anonymousGeneral, size = 'md', alt = '匿名', items } = Astro.props
const mappedSize = SIZE_MAP[size as keyof typeof SIZE_MAP] * 4 // pxへ変換
const initial = extractInitialCharacters(alt)
const sxConditional = {
  ...sx,
  // Listコンポーネントを使わないときは、クリック(タップ)を無効
  ...(items ? {} : { pointerEvents: 'none' as const }),
  size
}
// Letter avatars or Image avatars
const isLetterAvatar = src === anonymousGeneral && alt !== '匿名'

validateAvatarProps(sx?.size as Size | undefined, sx?.pointerEvents)
---

{
  /* avatarの容量を最適化する画像幅の基準は512pxで固定にしているため、意図しない最適化が発生する可能性が低いと思うので、isOptimizationは常にtrueにしています。 */
}
<details class={isLetterAvatar ? styleLetter(sxConditional) : styleImage(sxConditional)}>
  <summary>
    {
      isLetterAvatar ? (
        initial
      ) : (
        <Image src={src} width={mappedSize} height={mappedSize} alt={alt} isOptimization isAvatar />
      )
    }
  </summary>
  {items && <List items={items} />}
</details>
